digraph "retry_multiple.rb" {
subgraph "cluster_::Object#main" {
    label = "::Object#main";
    color = blue;
    "bb::Object#main_0" [shape = invhouse];
    "bb::Object#main_1" [shape = parallelogram];

    "bb::Object#main_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\ltry: Integer(0) = 0\l<unconditional>\l"
    ];

    "bb::Object#main_0" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#main_1" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_2" [
        label = "block[id=2, rubyBlockId=0](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<exceptionValue>$4: T.untyped = <unanalyzable>\l<exceptionValue>$4: T.untyped\l"
    ];

    "bb::Object#main_2" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_2" -> "bb::Object#main_4" [style="tapered"];

    "bb::Object#main_3" [
        label = "block[id=3, rubyBlockId=2](<returnMethodTemp>$2: NilClass, <self>: Object, <exceptionValue>$4: T.untyped, try: Integer(0))\l<exceptionClassTemp>$23: T.class_of(A) = alias <C A>\l<isaCheckTemp>$24: T.untyped = <exceptionValue>$4: T.untyped.is_a?(<exceptionClassTemp>$23: T.class_of(A))\l<isaCheckTemp>$24: T.untyped\l"
    ];

    "bb::Object#main_3" -> "bb::Object#main_13" [style="bold"];
    "bb::Object#main_3" -> "bb::Object#main_14" [style="tapered"];

    "bb::Object#main_4" [
        label = "block[id=4, rubyBlockId=1](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<statTemp>$7: Integer(3) = 3\l<ifTemp>$5: T::Boolean = try: Integer(0).<(<statTemp>$7: Integer(3))\l<ifTemp>$5: T::Boolean\l"
    ];

    "bb::Object#main_4" -> "bb::Object#main_5" [style="bold"];
    "bb::Object#main_4" -> "bb::Object#main_6" [style="tapered"];

    "bb::Object#main_5" [
        label = "block[id=5, rubyBlockId=1](<self>: Object, try: Integer(0))\l<statTemp>$9: Integer(0) = try\l<statTemp>$10: Integer(1) = 1\ltry: Integer = <statTemp>$9: Integer(0).+(<statTemp>$10: Integer(1))\l<statTemp>$13: T.class_of(A) = alias <C A>\l<statTemp>$12: A = <statTemp>$13: T.class_of(A).new()\l<returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$12: A)\l<unconditional>\l"
    ];

    "bb::Object#main_5" -> "bb::Object#main_10" [style="bold"];
    "bb::Object#main_6" [
        label = "block[id=6, rubyBlockId=1](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<statTemp>$16: Integer(6) = 6\l<ifTemp>$14: T::Boolean = try: Integer(0).<(<statTemp>$16: Integer(6))\l<ifTemp>$14: T::Boolean\l"
    ];

    "bb::Object#main_6" -> "bb::Object#main_7" [style="bold"];
    "bb::Object#main_6" -> "bb::Object#main_10" [style="tapered"];

    "bb::Object#main_7" [
        label = "block[id=7, rubyBlockId=1](<self>: Object, try: Integer(0))\l<statTemp>$18: Integer(0) = try\l<statTemp>$19: Integer(1) = 1\ltry: Integer = <statTemp>$18: Integer(0).+(<statTemp>$19: Integer(1))\l<statTemp>$22: T.class_of(B) = alias <C B>\l<statTemp>$21: B = <statTemp>$22: T.class_of(B).new()\l<returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$21: B)\l<unconditional>\l"
    ];

    "bb::Object#main_7" -> "bb::Object#main_10" [style="bold"];
    "bb::Object#main_10" [
        label = "block[id=10, rubyBlockId=1](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<exceptionValue>$4: T.untyped = <unanalyzable>\l<exceptionValue>$4: T.untyped\l"
    ];

    "bb::Object#main_10" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_10" -> "bb::Object#main_11" [style="tapered"];

    "bb::Object#main_11" [
        label = "block[id=11, rubyBlockId=4](<returnMethodTemp>$2: NilClass)\l<unconditional>\l"
    ];

    "bb::Object#main_11" -> "bb::Object#main_12" [style="bold"];
    "bb::Object#main_12" [
        label = "block[id=12, rubyBlockId=3](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: T.nilable(TrueClass))\l<gotoDeadTemp>$35: T.nilable(TrueClass)\l"
    ];

    "bb::Object#main_12" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_12" -> "bb::Object#main_17" [style="tapered"];

    "bb::Object#main_13" [
        label = "block[id=13, rubyBlockId=2](<returnMethodTemp>$2: NilClass, <self>: Object, <exceptionValue>$4: A, try: Integer(0))\l<statTemp>$27: String(\"rescue A \") = \"rescue A \"\l<statTemp>$25: NilClass = <self>: Object.puts(<statTemp>$27: String(\"rescue A \"))\l<unconditional>\l"
    ];

    "bb::Object#main_13" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_14" [
        label = "block[id=14, rubyBlockId=2](<returnMethodTemp>$2: NilClass, <self>: Object, <exceptionValue>$4: T.untyped, try: Integer(0))\l<exceptionClassTemp>$29: T.class_of(B) = alias <C B>\l<isaCheckTemp>$30: T.untyped = <exceptionValue>$4: T.untyped.is_a?(<exceptionClassTemp>$29: T.class_of(B))\l<isaCheckTemp>$30: T.untyped\l"
    ];

    "bb::Object#main_14" -> "bb::Object#main_15" [style="bold"];
    "bb::Object#main_14" -> "bb::Object#main_16" [style="tapered"];

    "bb::Object#main_15" [
        label = "block[id=15, rubyBlockId=2](<returnMethodTemp>$2: NilClass, <self>: Object, <exceptionValue>$4: B, try: Integer(0))\l<statTemp>$33: String(\"rescue B \") = \"rescue B \"\l<statTemp>$31: NilClass = <self>: Object.puts(<statTemp>$33: String(\"rescue B \"))\l<unconditional>\l"
    ];

    "bb::Object#main_15" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_16" [
        label = "block[id=16, rubyBlockId=2](<returnMethodTemp>$2: NilClass)\l<gotoDeadTemp>$35: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::Object#main_16" -> "bb::Object#main_12" [style="bold"];
    "bb::Object#main_17" [
        label = "block[id=17, rubyBlockId=0](<returnMethodTemp>$2: NilClass)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Object#main_17" -> "bb::Object#main_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$6: T.class_of(A) = alias <C A>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(<Magic>).<define-top-class-or-module>(<statTemp>$6: T.class_of(A))\l<statTemp>$8: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$9: T.class_of(A) = alias <C A>\l<statTemp>$7: Sorbet::Private::Static::Void = <statTemp>$8: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$9: T.class_of(A))\l<statTemp>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$12: T.class_of(Exception) = alias <C Exception>\l<statTemp>$10: Sorbet::Private::Static::Void = <statTemp>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$12: T.class_of(Exception))\l<statTemp>$15: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$16: T.class_of(B) = alias <C B>\l<statTemp>$14: Sorbet::Private::Static::Void = <statTemp>$15: T.class_of(<Magic>).<define-top-class-or-module>(<statTemp>$16: T.class_of(B))\l<statTemp>$18: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$19: T.class_of(B) = alias <C B>\l<statTemp>$17: Sorbet::Private::Static::Void = <statTemp>$18: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$19: T.class_of(B))\l<statTemp>$21: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$22: T.class_of(Exception) = alias <C Exception>\l<statTemp>$20: Sorbet::Private::Static::Void = <statTemp>$21: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$22: T.class_of(Exception))\l<statTemp>$24: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$26: Symbol(:\"main\") = :\"main\"\l<statTemp>$23: Symbol(:\"main\") = <statTemp>$24: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$26: Symbol(:\"main\"))\l<statTemp>$27: T.untyped = <self>: T.class_of(<root>).main()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#<static-init>" {
    label = "::<Class:A>#<static-init>";
    color = blue;
    "bb::<Class:A>#<static-init>_0" [shape = invhouse];
    "bb::<Class:A>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:A>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(A) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U A>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U A>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_0" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
    "bb::<Class:A>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_1" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:B>#<static-init>" {
    label = "::<Class:B>#<static-init>";
    color = blue;
    "bb::<Class:B>#<static-init>_0" [shape = invhouse];
    "bb::<Class:B>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:B>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(B) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U B>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U B>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:B>#<static-init>_0" -> "bb::<Class:B>#<static-init>_1" [style="bold"];
    "bb::<Class:B>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:B>#<static-init>_1" -> "bb::<Class:B>#<static-init>_1" [style="bold"];
}

}

