digraph "rescue_two_return.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<exceptionValue>$4: T.untyped = <unanalyzable>\l<exceptionValue>$4: T.untyped\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_3" [style="bold"];
    "bb::Object#foo_0" -> "bb::Object#foo_4" [style="tapered"];

    "bb::Object#foo_1" [
        label = "block[id=1, rubyBlockId=0]()\l<exceptionValue>$4 = <unanalyzable>\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_3" [
        label = "block[id=3, rubyBlockId=2](<self>: Object, <exceptionValue>$4: T.untyped)\l<exceptionClassTemp>$6: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$7: T.untyped = <exceptionValue>$4: T.untyped.is_a?(<exceptionClassTemp>$6: T.class_of(StandardError))\l<isaCheckTemp>$7: T.untyped\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_7" [style="bold"];
    "bb::Object#foo_3" -> "bb::Object#foo_8" [style="tapered"];

    "bb::Object#foo_4" [
        label = "block[id=4, rubyBlockId=1]()\l<returnTemp>$5: Integer(1) = 1\l<statTemp>$3: T.noreturn = return <returnTemp>$5: Integer(1)\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_6" [
        label = "block[id=6, rubyBlockId=3](<self>: Object, <gotoDeadTemp>$9: TrueClass(true))\l<gotoDeadTemp>$9: TrueClass(true)\l"
    ];

    "bb::Object#foo_6" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_6" -> "bb::Object#foo_9" [style="tapered"];

    "bb::Object#foo_7" [
        label = "block[id=7, rubyBlockId=2]()\l<returnTemp>$8: Integer(2) = 2\l<statTemp>$3: T.noreturn = return <returnTemp>$8: Integer(2)\l<unconditional>\l"
    ];

    "bb::Object#foo_7" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_8" [
        label = "block[id=8, rubyBlockId=2](<self>: Object)\l<gotoDeadTemp>$9: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::Object#foo_8" -> "bb::Object#foo_6" [style="bold"];
    "bb::Object#foo_9" [
        label = "block[id=9, rubyBlockId=0](<self>: Object)\l<returnMethodTemp>$2 = <self>.deadcode()\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::Object#foo_9" -> "bb::Object#foo_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$3: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$5: Symbol(:\"foo\") = :\"foo\"\l<returnMethodTemp>$2: Symbol(:\"foo\") = <statTemp>$3: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$5: Symbol(:\"foo\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:\"foo\")\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

}

