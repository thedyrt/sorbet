digraph "uaf1.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$4: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$5: T.class_of(A) = alias <C A>\l<statTemp>$3: Sorbet::Private::Static::Void = <statTemp>$4: T.class_of(<Magic>).<define-top-class-or-module>(<statTemp>$5: T.class_of(A))\l<statTemp>$7: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$8: T.class_of(A) = alias <C A>\l<statTemp>$6: Sorbet::Private::Static::Void = <statTemp>$7: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$8: T.class_of(A))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::A#initialize" {
    label = "::A#initialize";
    color = blue;
    "bb::A#initialize_0" [shape = invhouse];
    "bb::A#initialize_1" [shape = parallelogram];

    "bb::A#initialize_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: A = cast(<self>: NilClass, A);\l<statTemp>$3: T.untyped = <self>: A.spec_list()\l<block-pre-call-temp>$5: Sorbet::Private::Static::Void = <statTemp>$3: T.untyped.map()\l<selfRestore>$6: A = <self>\l<unconditional>\l"
    ];

    "bb::A#initialize_0" -> "bb::A#initialize_2" [style="bold"];
    "bb::A#initialize_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::A#initialize_1" -> "bb::A#initialize_1" [style="bold"];
    "bb::A#initialize_2" [
        label = "block[id=2, rubyBlockId=1](<blockReturnTemp>$9: NilClass, <self>: A, <selfRestore>$6: A, <gotoDeadTemp>$13: NilClass, <block-pre-call-temp>$5: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::A#initialize_2" -> "bb::A#initialize_5" [style="bold"];
    "bb::A#initialize_2" -> "bb::A#initialize_3" [style="tapered"];

    "bb::A#initialize_3" [
        label = "block[id=3, rubyBlockId=0](<selfRestore>$6: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void)\l<returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$5, map>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::A#initialize_3" -> "bb::A#initialize_1" [style="bold"];
    "bb::A#initialize_5" [
        label = "block[id=5, rubyBlockId=1](<blockReturnTemp>$9: NilClass, <self>: A, <selfRestore>$6: A, <gotoDeadTemp>$13: NilClass, <block-pre-call-temp>$5: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: A = loadSelf\l<exceptionValue>$10: T.untyped = <unanalyzable>\l<exceptionValue>$10: T.untyped\l"
    ];

    "bb::A#initialize_5" -> "bb::A#initialize_7" [style="bold"];
    "bb::A#initialize_5" -> "bb::A#initialize_8" [style="tapered"];

    "bb::A#initialize_7" [
        label = "block[id=7, rubyBlockId=3](<blockReturnTemp>$9: T.nilable(Integer), <self>: A, <selfRestore>$6: A, <exceptionValue>$10: T.untyped, <gotoDeadTemp>$13: NilClass, <block-pre-call-temp>$5: Sorbet::Private::Static::Void)\louterLoops: 1\lse$1: T.untyped = <exceptionValue>$10\l<exceptionClassTemp>$11: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$12: T.untyped = se$1: T.untyped.is_a?(<exceptionClassTemp>$11: T.class_of(StandardError))\l<isaCheckTemp>$12: T.untyped\l"
    ];

    "bb::A#initialize_7" -> "bb::A#initialize_11" [style="bold"];
    "bb::A#initialize_7" -> "bb::A#initialize_12" [style="tapered"];

    "bb::A#initialize_8" [
        label = "block[id=8, rubyBlockId=2](<self>: A, <selfRestore>$6: A, <gotoDeadTemp>$13: NilClass, <block-pre-call-temp>$5: Sorbet::Private::Static::Void)\louterLoops: 1\l<blockReturnTemp>$9: Integer(1) = 1\l<exceptionValue>$10: T.untyped = <unanalyzable>\l<exceptionValue>$10: T.untyped\l"
    ];

    "bb::A#initialize_8" -> "bb::A#initialize_7" [style="bold"];
    "bb::A#initialize_8" -> "bb::A#initialize_9" [style="tapered"];

    "bb::A#initialize_9" [
        label = "block[id=9, rubyBlockId=5](<blockReturnTemp>$9: Integer(1), <self>: A, <selfRestore>$6: A, <gotoDeadTemp>$13: NilClass, <block-pre-call-temp>$5: Sorbet::Private::Static::Void)\louterLoops: 1\l<unconditional>\l"
    ];

    "bb::A#initialize_9" -> "bb::A#initialize_10" [style="bold"];
    "bb::A#initialize_10" [
        label = "block[id=10, rubyBlockId=4](<blockReturnTemp>$9: T.nilable(Integer), <self>: A, <selfRestore>$6: A, <gotoDeadTemp>$13: T.nilable(TrueClass), <block-pre-call-temp>$5: Sorbet::Private::Static::Void)\louterLoops: 1\l<gotoDeadTemp>$13: T.nilable(TrueClass)\l"
    ];

    "bb::A#initialize_10" -> "bb::A#initialize_1" [style="bold"];
    "bb::A#initialize_10" -> "bb::A#initialize_13" [style="tapered"];

    "bb::A#initialize_11" [
        label = "block[id=11, rubyBlockId=3](<self>: A, <selfRestore>$6: A, <gotoDeadTemp>$13: NilClass, <block-pre-call-temp>$5: Sorbet::Private::Static::Void)\louterLoops: 1\l<blockReturnTemp>$9: Integer(2) = 2\l<unconditional>\l"
    ];

    "bb::A#initialize_11" -> "bb::A#initialize_10" [style="bold"];
    "bb::A#initialize_12" [
        label = "block[id=12, rubyBlockId=3](<blockReturnTemp>$9: T.nilable(Integer), <self>: A, <selfRestore>$6: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void)\louterLoops: 1\l<gotoDeadTemp>$13: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::A#initialize_12" -> "bb::A#initialize_10" [style="bold"];
    "bb::A#initialize_13" [
        label = "block[id=13, rubyBlockId=1](<blockReturnTemp>$9: Integer, <self>: A, <selfRestore>$6: A, <gotoDeadTemp>$13: NilClass, <block-pre-call-temp>$5: Sorbet::Private::Static::Void)\louterLoops: 1\l<blockReturnTemp>$15: T.noreturn = blockreturn<map> <blockReturnTemp>$9: Integer\l<unconditional>\l"
    ];

    "bb::A#initialize_13" -> "bb::A#initialize_2" [style="bold"];
}

subgraph "cluster_::<Class:A>#<static-init>" {
    label = "::<Class:A>#<static-init>";
    color = blue;
    "bb::<Class:A>#<static-init>_0" [shape = invhouse];
    "bb::<Class:A>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:A>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(A) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U A>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U A>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$3: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$5: Symbol(:\"initialize\") = :\"initialize\"\l<returnMethodTemp>$2: Symbol(:\"initialize\") = <statTemp>$3: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(A), <statTemp>$5: Symbol(:\"initialize\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:\"initialize\")\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_0" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
    "bb::<Class:A>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_1" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
}

}

