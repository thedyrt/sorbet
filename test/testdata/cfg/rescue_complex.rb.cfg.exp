digraph "rescue_complex.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$4: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$5: T.class_of(TestRescue) = alias <C TestRescue>\l<statTemp>$3: Sorbet::Private::Static::Void = <statTemp>$4: T.class_of(<Magic>).<define-top-class-or-module>(<statTemp>$5: T.class_of(TestRescue))\l<statTemp>$7: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$8: T.class_of(TestRescue) = alias <C TestRescue>\l<statTemp>$6: Sorbet::Private::Static::Void = <statTemp>$7: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$8: T.class_of(TestRescue))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::TestRescue#meth" {
    label = "::TestRescue#meth";
    color = blue;
    "bb::TestRescue#meth_0" [shape = invhouse];
    "bb::TestRescue#meth_1" [shape = parallelogram];

    "bb::TestRescue#meth_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<returnMethodTemp>$2: Integer(0) = 0\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(0)\l<unconditional>\l"
    ];

    "bb::TestRescue#meth_0" -> "bb::TestRescue#meth_1" [style="bold"];
    "bb::TestRescue#meth_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#meth_1" -> "bb::TestRescue#meth_1" [style="bold"];
}

subgraph "cluster_::TestRescue#foo" {
    label = "::TestRescue#foo";
    color = blue;
    "bb::TestRescue#foo_0" [shape = invhouse];
    "bb::TestRescue#foo_1" [shape = parallelogram];

    "bb::TestRescue#foo_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<returnMethodTemp>$2: Integer(1) = 1\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(1)\l<unconditional>\l"
    ];

    "bb::TestRescue#foo_0" -> "bb::TestRescue#foo_1" [style="bold"];
    "bb::TestRescue#foo_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#foo_1" -> "bb::TestRescue#foo_1" [style="bold"];
}

subgraph "cluster_::TestRescue#bar" {
    label = "::TestRescue#bar";
    color = blue;
    "bb::TestRescue#bar_0" [shape = invhouse];
    "bb::TestRescue#bar_1" [shape = parallelogram];

    "bb::TestRescue#bar_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<returnMethodTemp>$2: Integer(2) = 2\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(2)\l<unconditional>\l"
    ];

    "bb::TestRescue#bar_0" -> "bb::TestRescue#bar_1" [style="bold"];
    "bb::TestRescue#bar_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#bar_1" -> "bb::TestRescue#bar_1" [style="bold"];
}

subgraph "cluster_::TestRescue#baz" {
    label = "::TestRescue#baz";
    color = blue;
    "bb::TestRescue#baz_0" [shape = invhouse];
    "bb::TestRescue#baz_1" [shape = parallelogram];

    "bb::TestRescue#baz_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<returnMethodTemp>$2: Integer(3) = 3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(3)\l<unconditional>\l"
    ];

    "bb::TestRescue#baz_0" -> "bb::TestRescue#baz_1" [style="bold"];
    "bb::TestRescue#baz_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#baz_1" -> "bb::TestRescue#baz_1" [style="bold"];
}

subgraph "cluster_::TestRescue#take_arg" {
    label = "::TestRescue#take_arg";
    color = blue;
    "bb::TestRescue#take_arg_0" [shape = invhouse];
    "bb::TestRescue#take_arg_1" [shape = parallelogram];

    "bb::TestRescue#take_arg_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\lx: T.untyped = load_arg(x)\l<returnMethodTemp>$2: T.untyped = x\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#take_arg_0" -> "bb::TestRescue#take_arg_1" [style="bold"];
    "bb::TestRescue#take_arg_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#take_arg_1" -> "bb::TestRescue#take_arg_1" [style="bold"];
}

subgraph "cluster_::TestRescue#initialize" {
    label = "::TestRescue#initialize";
    color = blue;
    "bb::TestRescue#initialize_0" [shape = invhouse];
    "bb::TestRescue#initialize_1" [shape = parallelogram];

    "bb::TestRescue#initialize_0" [
        label = "block[id=0, rubyBlockId=0]()\l@ex$3: T.nilable(StandardError) = alias @ex\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: T.class_of(T) = alias <C T>\l<statTemp>$8: T.class_of(StandardError) = alias <C StandardError>\l<statTemp>$6: <Type: T.nilable(StandardError)> = <statTemp>$7: T.class_of(T).nilable(<statTemp>$8: T.class_of(StandardError))\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$6: <Type: T.nilable(StandardError)>)\l<castTemp>$9: NilClass = nil\l@ex$3: T.nilable(StandardError) = cast(<castTemp>$9: NilClass, StandardError | NilClass);\l<returnMethodTemp>$2: T.nilable(StandardError) = @ex$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(StandardError)\l<unconditional>\l"
    ];

    "bb::TestRescue#initialize_0" -> "bb::TestRescue#initialize_1" [style="bold"];
    "bb::TestRescue#initialize_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#initialize_1" -> "bb::TestRescue#initialize_1" [style="bold"];
}

subgraph "cluster_::TestRescue#multiple_rescue" {
    label = "::TestRescue#multiple_rescue";
    color = blue;
    "bb::TestRescue#multiple_rescue_0" [shape = invhouse];
    "bb::TestRescue#multiple_rescue_1" [shape = parallelogram];

    "bb::TestRescue#multiple_rescue_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_0" -> "bb::TestRescue#multiple_rescue_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_0" -> "bb::TestRescue#multiple_rescue_4" [style="tapered"];

    "bb::TestRescue#multiple_rescue_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_1" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_3" [
        label = "block[id=3, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <exceptionValue>$3: T.untyped)\l<exceptionClassTemp>$5: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$6: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<exceptionClassTemp>$5: T.class_of(StandardError))\l<isaCheckTemp>$6: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_3" -> "bb::TestRescue#multiple_rescue_7" [style="bold"];
    "bb::TestRescue#multiple_rescue_3" -> "bb::TestRescue#multiple_rescue_8" [style="tapered"];

    "bb::TestRescue#multiple_rescue_4" [
        label = "block[id=4, rubyBlockId=1](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_4" -> "bb::TestRescue#multiple_rescue_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_4" -> "bb::TestRescue#multiple_rescue_5" [style="tapered"];

    "bb::TestRescue#multiple_rescue_5" [
        label = "block[id=5, rubyBlockId=4](<returnMethodTemp>$2: T.untyped)\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_5" -> "bb::TestRescue#multiple_rescue_6" [style="bold"];
    "bb::TestRescue#multiple_rescue_6" [
        label = "block[id=6, rubyBlockId=3](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$11: T.nilable(TrueClass))\l<gotoDeadTemp>$11: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#multiple_rescue_6" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_6" -> "bb::TestRescue#multiple_rescue_11" [style="tapered"];

    "bb::TestRescue#multiple_rescue_7" [
        label = "block[id=7, rubyBlockId=2](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.baz()\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_7" -> "bb::TestRescue#multiple_rescue_6" [style="bold"];
    "bb::TestRescue#multiple_rescue_8" [
        label = "block[id=8, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <exceptionValue>$3: T.untyped)\l<exceptionClassTemp>$8: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$9: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<exceptionClassTemp>$8: T.class_of(StandardError))\l<isaCheckTemp>$9: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_8" -> "bb::TestRescue#multiple_rescue_9" [style="bold"];
    "bb::TestRescue#multiple_rescue_8" -> "bb::TestRescue#multiple_rescue_10" [style="tapered"];

    "bb::TestRescue#multiple_rescue_9" [
        label = "block[id=9, rubyBlockId=2](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_9" -> "bb::TestRescue#multiple_rescue_6" [style="bold"];
    "bb::TestRescue#multiple_rescue_10" [
        label = "block[id=10, rubyBlockId=2](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$11: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_10" -> "bb::TestRescue#multiple_rescue_6" [style="bold"];
    "bb::TestRescue#multiple_rescue_11" [
        label = "block[id=11, rubyBlockId=0](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_11" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
}

subgraph "cluster_::TestRescue#multiple_rescue_classes" {
    label = "::TestRescue#multiple_rescue_classes";
    color = blue;
    "bb::TestRescue#multiple_rescue_classes_0" [shape = invhouse];
    "bb::TestRescue#multiple_rescue_classes_1" [shape = parallelogram];

    "bb::TestRescue#multiple_rescue_classes_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_0" -> "bb::TestRescue#multiple_rescue_classes_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_0" -> "bb::TestRescue#multiple_rescue_classes_4" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_1" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_3" [
        label = "block[id=3, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped)\lbaz: T.untyped = <exceptionValue>$3\l<exceptionClassTemp>$5: T.untyped = alias <C T.untyped>\l<isaCheckTemp>$6: T.untyped = baz: T.untyped.is_a?(<exceptionClassTemp>$5: T.untyped)\l<isaCheckTemp>$6: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_3" -> "bb::TestRescue#multiple_rescue_classes_7" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_3" -> "bb::TestRescue#multiple_rescue_classes_8" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_4" [
        label = "block[id=4, rubyBlockId=1](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_4" -> "bb::TestRescue#multiple_rescue_classes_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_4" -> "bb::TestRescue#multiple_rescue_classes_5" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_5" [
        label = "block[id=5, rubyBlockId=4](<returnMethodTemp>$2: T.untyped)\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_5" -> "bb::TestRescue#multiple_rescue_classes_6" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_6" [
        label = "block[id=6, rubyBlockId=3](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$9: T.nilable(TrueClass))\l<gotoDeadTemp>$9: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_6" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_6" -> "bb::TestRescue#multiple_rescue_classes_10" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_7" [
        label = "block[id=7, rubyBlockId=2](baz: T.untyped)\l<returnMethodTemp>$2: T.untyped = baz\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_7" -> "bb::TestRescue#multiple_rescue_classes_6" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_8" [
        label = "block[id=8, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, baz: T.untyped)\l<exceptionClassTemp>$7: T.untyped = alias <C T.untyped>\l<isaCheckTemp>$8: T.untyped = baz: T.untyped.is_a?(<exceptionClassTemp>$7: T.untyped)\l<isaCheckTemp>$8: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_8" -> "bb::TestRescue#multiple_rescue_classes_7" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_8" -> "bb::TestRescue#multiple_rescue_classes_9" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_9" [
        label = "block[id=9, rubyBlockId=2](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$9: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_9" -> "bb::TestRescue#multiple_rescue_classes_6" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_10" [
        label = "block[id=10, rubyBlockId=0](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_10" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_ensure" {
    label = "::TestRescue#parse_rescue_ensure";
    color = blue;
    "bb::TestRescue#parse_rescue_ensure_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_ensure_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_ensure_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_0" -> "bb::TestRescue#parse_rescue_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_0" -> "bb::TestRescue#parse_rescue_ensure_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_1" -> "bb::TestRescue#parse_rescue_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_3" [
        label = "block[id=3, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <exceptionValue>$3: T.untyped)\l<exceptionClassTemp>$5: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$6: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<exceptionClassTemp>$5: T.class_of(StandardError))\l<isaCheckTemp>$6: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_3" -> "bb::TestRescue#parse_rescue_ensure_7" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_3" -> "bb::TestRescue#parse_rescue_ensure_8" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_4" [
        label = "block[id=4, rubyBlockId=1](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_4" -> "bb::TestRescue#parse_rescue_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_4" -> "bb::TestRescue#parse_rescue_ensure_5" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_5" [
        label = "block[id=5, rubyBlockId=4](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_5" -> "bb::TestRescue#parse_rescue_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_6" [
        label = "block[id=6, rubyBlockId=3](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <gotoDeadTemp>$8: T.nilable(TrueClass))\l<throwAwayTemp>$9: T.untyped = <self>: TestRescue.bar()\l<gotoDeadTemp>$8: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_6" -> "bb::TestRescue#parse_rescue_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_6" -> "bb::TestRescue#parse_rescue_ensure_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_7" [
        label = "block[id=7, rubyBlockId=2](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.baz()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_7" -> "bb::TestRescue#parse_rescue_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_8" [
        label = "block[id=8, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\l<gotoDeadTemp>$8: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_8" -> "bb::TestRescue#parse_rescue_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_9" [
        label = "block[id=9, rubyBlockId=0](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_9" -> "bb::TestRescue#parse_rescue_ensure_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_bug_rescue_empty_else" {
    label = "::TestRescue#parse_bug_rescue_empty_else";
    color = blue;
    "bb::TestRescue#parse_bug_rescue_empty_else_0" [shape = invhouse];
    "bb::TestRescue#parse_bug_rescue_empty_else_1" [shape = parallelogram];

    "bb::TestRescue#parse_bug_rescue_empty_else_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_0" -> "bb::TestRescue#parse_bug_rescue_empty_else_3" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_0" -> "bb::TestRescue#parse_bug_rescue_empty_else_4" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_1" -> "bb::TestRescue#parse_bug_rescue_empty_else_1" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_3" [
        label = "block[id=3, rubyBlockId=2](<exceptionValue>$3: T.untyped)\l<exceptionClassTemp>$4: T.class_of(LoadError) = alias <C LoadError>\l<isaCheckTemp>$5: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<exceptionClassTemp>$4: T.class_of(LoadError))\l<isaCheckTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_3" -> "bb::TestRescue#parse_bug_rescue_empty_else_6" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_3" -> "bb::TestRescue#parse_bug_rescue_empty_else_8" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_4" [
        label = "block[id=4, rubyBlockId=1]()\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_4" -> "bb::TestRescue#parse_bug_rescue_empty_else_3" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_4" -> "bb::TestRescue#parse_bug_rescue_empty_else_5" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_5" [
        label = "block[id=5, rubyBlockId=4]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_5" -> "bb::TestRescue#parse_bug_rescue_empty_else_6" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_6" [
        label = "block[id=6, rubyBlockId=3](<gotoDeadTemp>$6: T.nilable(TrueClass))\l<gotoDeadTemp>$6: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_6" -> "bb::TestRescue#parse_bug_rescue_empty_else_1" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_6" -> "bb::TestRescue#parse_bug_rescue_empty_else_9" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_8" [
        label = "block[id=8, rubyBlockId=2]()\l<gotoDeadTemp>$6: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_8" -> "bb::TestRescue#parse_bug_rescue_empty_else_6" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_9" [
        label = "block[id=9, rubyBlockId=0]()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_9" -> "bb::TestRescue#parse_bug_rescue_empty_else_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12686" {
    label = "::TestRescue#parse_ruby_bug_12686";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12686_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12686_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12686_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$5: T.untyped = <unanalyzable>\l<exceptionValue>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_0" -> "bb::TestRescue#parse_ruby_bug_12686_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_0" -> "bb::TestRescue#parse_ruby_bug_12686_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_1" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_3" [
        label = "block[id=3, rubyBlockId=2](<statTemp>$4: T.untyped, <self>: TestRescue, <exceptionValue>$5: T.untyped)\l<exceptionClassTemp>$7: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$8: T.untyped = <exceptionValue>$5: T.untyped.is_a?(<exceptionClassTemp>$7: T.class_of(StandardError))\l<isaCheckTemp>$8: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_3" -> "bb::TestRescue#parse_ruby_bug_12686_7" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_3" -> "bb::TestRescue#parse_ruby_bug_12686_8" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_4" [
        label = "block[id=4, rubyBlockId=1](<self>: TestRescue)\l<statTemp>$4: T.untyped = <self>: TestRescue.bar()\l<exceptionValue>$5: T.untyped = <unanalyzable>\l<exceptionValue>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_4" -> "bb::TestRescue#parse_ruby_bug_12686_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_4" -> "bb::TestRescue#parse_ruby_bug_12686_5" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_5" [
        label = "block[id=5, rubyBlockId=4](<statTemp>$4: T.untyped, <self>: TestRescue)\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_5" -> "bb::TestRescue#parse_ruby_bug_12686_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_6" [
        label = "block[id=6, rubyBlockId=3](<statTemp>$4: T.untyped, <self>: TestRescue, <gotoDeadTemp>$9: T.nilable(TrueClass))\l<gotoDeadTemp>$9: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_6" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_6" -> "bb::TestRescue#parse_ruby_bug_12686_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_7" [
        label = "block[id=7, rubyBlockId=2](<self>: TestRescue)\l<statTemp>$4: NilClass = nil\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_7" -> "bb::TestRescue#parse_ruby_bug_12686_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_8" [
        label = "block[id=8, rubyBlockId=2](<statTemp>$4: T.untyped, <self>: TestRescue)\l<gotoDeadTemp>$9: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_8" -> "bb::TestRescue#parse_ruby_bug_12686_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_9" [
        label = "block[id=9, rubyBlockId=0](<statTemp>$4: T.untyped, <self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.take_arg(<statTemp>$4: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_9" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_mod" {
    label = "::TestRescue#parse_rescue_mod";
    color = blue;
    "bb::TestRescue#parse_rescue_mod_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_mod_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_mod_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_0" -> "bb::TestRescue#parse_rescue_mod_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_0" -> "bb::TestRescue#parse_rescue_mod_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_1" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_3" [
        label = "block[id=3, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <exceptionValue>$3: T.untyped)\l<exceptionClassTemp>$5: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$6: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<exceptionClassTemp>$5: T.class_of(StandardError))\l<isaCheckTemp>$6: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_3" -> "bb::TestRescue#parse_rescue_mod_7" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_3" -> "bb::TestRescue#parse_rescue_mod_8" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_4" [
        label = "block[id=4, rubyBlockId=1](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_4" -> "bb::TestRescue#parse_rescue_mod_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_4" -> "bb::TestRescue#parse_rescue_mod_5" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_5" [
        label = "block[id=5, rubyBlockId=4](<returnMethodTemp>$2: T.untyped)\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_5" -> "bb::TestRescue#parse_rescue_mod_6" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_6" [
        label = "block[id=6, rubyBlockId=3](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$8: T.nilable(TrueClass))\l<gotoDeadTemp>$8: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_rescue_mod_6" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_6" -> "bb::TestRescue#parse_rescue_mod_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_7" [
        label = "block[id=7, rubyBlockId=2](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_7" -> "bb::TestRescue#parse_rescue_mod_6" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_8" [
        label = "block[id=8, rubyBlockId=2](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$8: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_8" -> "bb::TestRescue#parse_rescue_mod_6" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_9" [
        label = "block[id=9, rubyBlockId=0](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_9" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_resbody_list_var" {
    label = "::TestRescue#parse_resbody_list_var";
    color = blue;
    "bb::TestRescue#parse_resbody_list_var_0" [shape = invhouse];
    "bb::TestRescue#parse_resbody_list_var_1" [shape = parallelogram];

    "bb::TestRescue#parse_resbody_list_var_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_0" -> "bb::TestRescue#parse_resbody_list_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_0" -> "bb::TestRescue#parse_resbody_list_var_4" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_1" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_3" [
        label = "block[id=3, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <exceptionValue>$3: T.untyped)\lex: T.untyped = <exceptionValue>$3\l<exceptionClassTemp>$5: T.untyped = <self>: TestRescue.foo()\l<isaCheckTemp>$7: T.untyped = ex: T.untyped.is_a?(<exceptionClassTemp>$5: T.untyped)\l<isaCheckTemp>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_3" -> "bb::TestRescue#parse_resbody_list_var_7" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_3" -> "bb::TestRescue#parse_resbody_list_var_8" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_4" [
        label = "block[id=4, rubyBlockId=1](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_4" -> "bb::TestRescue#parse_resbody_list_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_4" -> "bb::TestRescue#parse_resbody_list_var_5" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_5" [
        label = "block[id=5, rubyBlockId=4](<returnMethodTemp>$2: T.untyped)\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_5" -> "bb::TestRescue#parse_resbody_list_var_6" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_6" [
        label = "block[id=6, rubyBlockId=3](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$9: T.nilable(TrueClass))\l<gotoDeadTemp>$9: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_6" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_6" -> "bb::TestRescue#parse_resbody_list_var_9" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_7" [
        label = "block[id=7, rubyBlockId=2](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_7" -> "bb::TestRescue#parse_resbody_list_var_6" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_8" [
        label = "block[id=8, rubyBlockId=2](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$9: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_8" -> "bb::TestRescue#parse_resbody_list_var_6" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_9" [
        label = "block[id=9, rubyBlockId=0](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_9" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_else_ensure" {
    label = "::TestRescue#parse_rescue_else_ensure";
    color = blue;
    "bb::TestRescue#parse_rescue_else_ensure_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_else_ensure_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_else_ensure_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_0" -> "bb::TestRescue#parse_rescue_else_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_0" -> "bb::TestRescue#parse_rescue_else_ensure_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_1" -> "bb::TestRescue#parse_rescue_else_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_3" [
        label = "block[id=3, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <exceptionValue>$3: T.untyped)\l<exceptionClassTemp>$6: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$7: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<exceptionClassTemp>$6: T.class_of(StandardError))\l<isaCheckTemp>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_3" -> "bb::TestRescue#parse_rescue_else_ensure_7" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_3" -> "bb::TestRescue#parse_rescue_else_ensure_8" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_4" [
        label = "block[id=4, rubyBlockId=1](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_4" -> "bb::TestRescue#parse_rescue_else_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_4" -> "bb::TestRescue#parse_rescue_else_ensure_5" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_5" [
        label = "block[id=5, rubyBlockId=4](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.foo()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_5" -> "bb::TestRescue#parse_rescue_else_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_6" [
        label = "block[id=6, rubyBlockId=3](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <gotoDeadTemp>$9: T.nilable(TrueClass))\l<throwAwayTemp>$10: T.untyped = <self>: TestRescue.bar()\l<gotoDeadTemp>$9: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_6" -> "bb::TestRescue#parse_rescue_else_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_6" -> "bb::TestRescue#parse_rescue_else_ensure_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_7" [
        label = "block[id=7, rubyBlockId=2](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.baz()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_7" -> "bb::TestRescue#parse_rescue_else_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_8" [
        label = "block[id=8, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\l<gotoDeadTemp>$9: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_8" -> "bb::TestRescue#parse_rescue_else_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_9" [
        label = "block[id=9, rubyBlockId=0](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_9" -> "bb::TestRescue#parse_rescue_else_ensure_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue" {
    label = "::TestRescue#parse_rescue";
    color = blue;
    "bb::TestRescue#parse_rescue_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_0" -> "bb::TestRescue#parse_rescue_3" [style="bold"];
    "bb::TestRescue#parse_rescue_0" -> "bb::TestRescue#parse_rescue_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_1" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
    "bb::TestRescue#parse_rescue_3" [
        label = "block[id=3, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <exceptionValue>$3: T.untyped)\l<exceptionClassTemp>$5: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$6: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<exceptionClassTemp>$5: T.class_of(StandardError))\l<isaCheckTemp>$6: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_3" -> "bb::TestRescue#parse_rescue_7" [style="bold"];
    "bb::TestRescue#parse_rescue_3" -> "bb::TestRescue#parse_rescue_8" [style="tapered"];

    "bb::TestRescue#parse_rescue_4" [
        label = "block[id=4, rubyBlockId=1](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_4" -> "bb::TestRescue#parse_rescue_3" [style="bold"];
    "bb::TestRescue#parse_rescue_4" -> "bb::TestRescue#parse_rescue_5" [style="tapered"];

    "bb::TestRescue#parse_rescue_5" [
        label = "block[id=5, rubyBlockId=4](<returnMethodTemp>$2: T.untyped)\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_5" -> "bb::TestRescue#parse_rescue_6" [style="bold"];
    "bb::TestRescue#parse_rescue_6" [
        label = "block[id=6, rubyBlockId=3](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$8: T.nilable(TrueClass))\l<gotoDeadTemp>$8: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_rescue_6" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
    "bb::TestRescue#parse_rescue_6" -> "bb::TestRescue#parse_rescue_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_7" [
        label = "block[id=7, rubyBlockId=2](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.foo()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_7" -> "bb::TestRescue#parse_rescue_6" [style="bold"];
    "bb::TestRescue#parse_rescue_8" [
        label = "block[id=8, rubyBlockId=2](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$8: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_8" -> "bb::TestRescue#parse_rescue_6" [style="bold"];
    "bb::TestRescue#parse_rescue_9" [
        label = "block[id=9, rubyBlockId=0](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_9" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_resbody_var" {
    label = "::TestRescue#parse_resbody_var";
    color = blue;
    "bb::TestRescue#parse_resbody_var_0" [shape = invhouse];
    "bb::TestRescue#parse_resbody_var_1" [shape = parallelogram];

    "bb::TestRescue#parse_resbody_var_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_0" -> "bb::TestRescue#parse_resbody_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_0" -> "bb::TestRescue#parse_resbody_var_4" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_3" [
        label = "block[id=3, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <exceptionValue>$3: T.untyped)\lex: T.untyped = <exceptionValue>$3\l<exceptionClassTemp>$5: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$6: T.untyped = ex: T.untyped.is_a?(<exceptionClassTemp>$5: T.class_of(StandardError))\l<isaCheckTemp>$6: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_3" -> "bb::TestRescue#parse_resbody_var_7" [style="bold"];
    "bb::TestRescue#parse_resbody_var_3" -> "bb::TestRescue#parse_resbody_var_8" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_4" [
        label = "block[id=4, rubyBlockId=1](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_4" -> "bb::TestRescue#parse_resbody_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_4" -> "bb::TestRescue#parse_resbody_var_5" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_5" [
        label = "block[id=5, rubyBlockId=4](<returnMethodTemp>$2: T.untyped)\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_5" -> "bb::TestRescue#parse_resbody_var_6" [style="bold"];
    "bb::TestRescue#parse_resbody_var_6" [
        label = "block[id=6, rubyBlockId=3](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$8: T.nilable(TrueClass))\l<gotoDeadTemp>$8: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_resbody_var_6" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_6" -> "bb::TestRescue#parse_resbody_var_9" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_7" [
        label = "block[id=7, rubyBlockId=2](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_7" -> "bb::TestRescue#parse_resbody_var_6" [style="bold"];
    "bb::TestRescue#parse_resbody_var_8" [
        label = "block[id=8, rubyBlockId=2](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$8: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_8" -> "bb::TestRescue#parse_resbody_var_6" [style="bold"];
    "bb::TestRescue#parse_resbody_var_9" [
        label = "block[id=9, rubyBlockId=0](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_9" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_resbody_var_1" {
    label = "::TestRescue#parse_resbody_var_1";
    color = blue;
    "bb::TestRescue#parse_resbody_var_1_0" [shape = invhouse];
    "bb::TestRescue#parse_resbody_var_1_1" [shape = parallelogram];

    "bb::TestRescue#parse_resbody_var_1_0" [
        label = "block[id=0, rubyBlockId=0]()\l@ex$8: T.nilable(StandardError) = alias @ex\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_0" -> "bb::TestRescue#parse_resbody_var_1_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_0" -> "bb::TestRescue#parse_resbody_var_1_4" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_1" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_3" [
        label = "block[id=3, rubyBlockId=2](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <exceptionValue>$3: T.untyped, @ex$8: T.nilable(StandardError))\l<exceptionClassTemp>$5: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$6: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<exceptionClassTemp>$5: T.class_of(StandardError))\l<isaCheckTemp>$6: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_3" -> "bb::TestRescue#parse_resbody_var_1_7" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_3" -> "bb::TestRescue#parse_resbody_var_1_8" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_4" [
        label = "block[id=4, rubyBlockId=1](<self>: TestRescue, @ex$8: T.nilable(StandardError))\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_4" -> "bb::TestRescue#parse_resbody_var_1_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_4" -> "bb::TestRescue#parse_resbody_var_1_5" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_5" [
        label = "block[id=5, rubyBlockId=4](<returnMethodTemp>$2: T.untyped)\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_5" -> "bb::TestRescue#parse_resbody_var_1_6" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_6" [
        label = "block[id=6, rubyBlockId=3](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$10: T.nilable(TrueClass))\l<gotoDeadTemp>$10: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_6" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_6" -> "bb::TestRescue#parse_resbody_var_1_9" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_7" [
        label = "block[id=7, rubyBlockId=2](<self>: TestRescue, <exceptionValue>$3: StandardError, @ex$8: T.nilable(StandardError))\l@ex$8: StandardError = <exceptionValue>$3\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_7" -> "bb::TestRescue#parse_resbody_var_1_6" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_8" [
        label = "block[id=8, rubyBlockId=2](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$10: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_8" -> "bb::TestRescue#parse_resbody_var_1_6" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_9" [
        label = "block[id=9, rubyBlockId=0](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_9" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_mod_op_assign" {
    label = "::TestRescue#parse_rescue_mod_op_assign";
    color = blue;
    "bb::TestRescue#parse_rescue_mod_op_assign_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_mod_op_assign_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_mod_op_assign_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<statTemp>$3: NilClass = foo\l<exceptionValue>$5: T.untyped = <unanalyzable>\l<exceptionValue>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_0" -> "bb::TestRescue#parse_rescue_mod_op_assign_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_0" -> "bb::TestRescue#parse_rescue_mod_op_assign_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_1" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_3" [
        label = "block[id=3, rubyBlockId=2](<statTemp>$3: NilClass, <statTemp>$4: T.untyped, <self>: TestRescue, <exceptionValue>$5: T.untyped)\l<exceptionClassTemp>$7: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$8: T.untyped = <exceptionValue>$5: T.untyped.is_a?(<exceptionClassTemp>$7: T.class_of(StandardError))\l<isaCheckTemp>$8: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_3" -> "bb::TestRescue#parse_rescue_mod_op_assign_7" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_3" -> "bb::TestRescue#parse_rescue_mod_op_assign_8" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_4" [
        label = "block[id=4, rubyBlockId=1](<statTemp>$3: NilClass, <self>: TestRescue)\l<statTemp>$4: T.untyped = <self>: TestRescue.meth()\l<exceptionValue>$5: T.untyped = <unanalyzable>\l<exceptionValue>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_4" -> "bb::TestRescue#parse_rescue_mod_op_assign_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_4" -> "bb::TestRescue#parse_rescue_mod_op_assign_5" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_5" [
        label = "block[id=5, rubyBlockId=4](<statTemp>$3: NilClass, <statTemp>$4: T.untyped)\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_5" -> "bb::TestRescue#parse_rescue_mod_op_assign_6" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_6" [
        label = "block[id=6, rubyBlockId=3](<statTemp>$3: NilClass, <statTemp>$4: T.untyped, <gotoDeadTemp>$10: T.nilable(TrueClass))\l<gotoDeadTemp>$10: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_6" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_6" -> "bb::TestRescue#parse_rescue_mod_op_assign_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_7" [
        label = "block[id=7, rubyBlockId=2](<statTemp>$3: NilClass, <self>: TestRescue)\l<statTemp>$4: T.untyped = <self>: TestRescue.bar()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_7" -> "bb::TestRescue#parse_rescue_mod_op_assign_6" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_8" [
        label = "block[id=8, rubyBlockId=2](<statTemp>$3: NilClass, <statTemp>$4: T.untyped)\l<gotoDeadTemp>$10: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_8" -> "bb::TestRescue#parse_rescue_mod_op_assign_6" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_9" [
        label = "block[id=9, rubyBlockId=0](<statTemp>$3: NilClass, <statTemp>$4: T.untyped)\lfoo: T.untyped = <statTemp>$3: NilClass.+(<statTemp>$4: T.untyped)\l<returnMethodTemp>$2: T.untyped = foo\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_9" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12402" {
    label = "::TestRescue#parse_ruby_bug_12402";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12402_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12402_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12402_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<exceptionValue>$3: T.untyped = <unanalyzable>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_0" -> "bb::TestRescue#parse_ruby_bug_12402_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_0" -> "bb::TestRescue#parse_ruby_bug_12402_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_3" [
        label = "block[id=3, rubyBlockId=2](<exceptionValue>$3: T.untyped, foo: NilClass)\l<exceptionClassTemp>$7: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$8: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<exceptionClassTemp>$7: T.class_of(StandardError))\l<isaCheckTemp>$8: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_3" -> "bb::TestRescue#parse_ruby_bug_12402_7" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_3" -> "bb::TestRescue#parse_ruby_bug_12402_8" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_4" [
        label = "block[id=4, rubyBlockId=1](<self>: TestRescue)\l<statTemp>$5: T.untyped = <self>: TestRescue.bar()\lfoo: T.noreturn = <self>: TestRescue.raise(<statTemp>$5: T.untyped)\l<exceptionValue>$3 = <unanalyzable>\l<exceptionValue>$3\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_4" -> "bb::TestRescue#parse_ruby_bug_12402_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_4" -> "bb::TestRescue#parse_ruby_bug_12402_5" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_5" [
        label = "block[id=5, rubyBlockId=4](foo: NilClass)\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_5" -> "bb::TestRescue#parse_ruby_bug_12402_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_6" [
        label = "block[id=6, rubyBlockId=3](<gotoDeadTemp>$9: T.nilable(TrueClass), foo: NilClass)\l<gotoDeadTemp>$9: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_6" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_6" -> "bb::TestRescue#parse_ruby_bug_12402_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_7" [
        label = "block[id=7, rubyBlockId=2]()\lfoo: NilClass = nil\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_7" -> "bb::TestRescue#parse_ruby_bug_12402_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_8" [
        label = "block[id=8, rubyBlockId=2](foo: NilClass)\l<gotoDeadTemp>$9: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_8" -> "bb::TestRescue#parse_ruby_bug_12402_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_9" [
        label = "block[id=9, rubyBlockId=0](foo: NilClass)\l<returnMethodTemp>$2: NilClass = foo\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_9" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12402_1" {
    label = "::TestRescue#parse_ruby_bug_12402_1";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12402_1_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12402_1_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12402_1_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<statTemp>$3: NilClass = foo\l<exceptionValue>$5: T.untyped = <unanalyzable>\l<exceptionValue>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_0" -> "bb::TestRescue#parse_ruby_bug_12402_1_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_0" -> "bb::TestRescue#parse_ruby_bug_12402_1_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_1" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_3" [
        label = "block[id=3, rubyBlockId=2](<statTemp>$3: NilClass, <statTemp>$4: NilClass, <exceptionValue>$5: T.untyped)\l<exceptionClassTemp>$9: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$10: T.untyped = <exceptionValue>$5: T.untyped.is_a?(<exceptionClassTemp>$9: T.class_of(StandardError))\l<isaCheckTemp>$10: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_3" -> "bb::TestRescue#parse_ruby_bug_12402_1_7" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_3" -> "bb::TestRescue#parse_ruby_bug_12402_1_8" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_4" [
        label = "block[id=4, rubyBlockId=1](<statTemp>$3: NilClass, <self>: TestRescue)\l<statTemp>$7: T.untyped = <self>: TestRescue.bar()\l<statTemp>$4: T.noreturn = <self>: TestRescue.raise(<statTemp>$7: T.untyped)\l<exceptionValue>$5 = <unanalyzable>\l<exceptionValue>$5\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_4" -> "bb::TestRescue#parse_ruby_bug_12402_1_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_4" -> "bb::TestRescue#parse_ruby_bug_12402_1_5" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_5" [
        label = "block[id=5, rubyBlockId=4](<statTemp>$3: NilClass, <statTemp>$4: NilClass)\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_5" -> "bb::TestRescue#parse_ruby_bug_12402_1_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_6" [
        label = "block[id=6, rubyBlockId=3](<statTemp>$3: NilClass, <statTemp>$4: NilClass, <gotoDeadTemp>$11: T.nilable(TrueClass))\l<gotoDeadTemp>$11: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_6" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_6" -> "bb::TestRescue#parse_ruby_bug_12402_1_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_7" [
        label = "block[id=7, rubyBlockId=2](<statTemp>$3: NilClass)\l<statTemp>$4: NilClass = nil\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_7" -> "bb::TestRescue#parse_ruby_bug_12402_1_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_8" [
        label = "block[id=8, rubyBlockId=2](<statTemp>$3: NilClass, <statTemp>$4: NilClass)\l<gotoDeadTemp>$11: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_8" -> "bb::TestRescue#parse_ruby_bug_12402_1_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_9" [
        label = "block[id=9, rubyBlockId=0](<statTemp>$3: NilClass, <statTemp>$4: NilClass)\lfoo: T.untyped = <statTemp>$3: NilClass.+(<statTemp>$4: NilClass)\l<returnMethodTemp>$2: T.untyped = foo\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_9" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12402_2" {
    label = "::TestRescue#parse_ruby_bug_12402_2";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12402_2_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12402_2_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12402_2_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l[]$3: T.untyped = <self>: TestRescue.foo()\l[]$4: Integer(0) = 0\l<statTemp>$9: T.untyped = []$3: T.untyped.[]([]$4: Integer(0))\l<exceptionValue>$13: T.untyped = <unanalyzable>\l<exceptionValue>$13: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_0" -> "bb::TestRescue#parse_ruby_bug_12402_2_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_0" -> "bb::TestRescue#parse_ruby_bug_12402_2_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_1" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_3" [
        label = "block[id=3, rubyBlockId=2](<statTemp>$9: T.untyped, <statTemp>$12: NilClass, <exceptionValue>$13: T.untyped, []$3: T.untyped, []$4: Integer(0))\l<exceptionClassTemp>$17: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$18: T.untyped = <exceptionValue>$13: T.untyped.is_a?(<exceptionClassTemp>$17: T.class_of(StandardError))\l<isaCheckTemp>$18: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_3" -> "bb::TestRescue#parse_ruby_bug_12402_2_7" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_3" -> "bb::TestRescue#parse_ruby_bug_12402_2_8" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_4" [
        label = "block[id=4, rubyBlockId=1](<statTemp>$9: T.untyped, <self>: TestRescue, []$3: T.untyped, []$4: Integer(0))\l<statTemp>$15: T.untyped = <self>: TestRescue.bar()\l<statTemp>$12: T.noreturn = <self>: TestRescue.raise(<statTemp>$15: T.untyped)\l<exceptionValue>$13 = <unanalyzable>\l<exceptionValue>$13\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_4" -> "bb::TestRescue#parse_ruby_bug_12402_2_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_4" -> "bb::TestRescue#parse_ruby_bug_12402_2_5" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_5" [
        label = "block[id=5, rubyBlockId=4](<statTemp>$9: NilClass, <statTemp>$12: NilClass, []$3: NilClass, []$4: NilClass)\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_5" -> "bb::TestRescue#parse_ruby_bug_12402_2_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_6" [
        label = "block[id=6, rubyBlockId=3](<statTemp>$9: T.untyped, <statTemp>$12: NilClass, <gotoDeadTemp>$19: T.nilable(TrueClass), []$3: T.untyped, []$4: Integer(0))\l<gotoDeadTemp>$19: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_6" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_6" -> "bb::TestRescue#parse_ruby_bug_12402_2_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_7" [
        label = "block[id=7, rubyBlockId=2](<statTemp>$9: T.untyped, []$3: T.untyped, []$4: Integer(0))\l<statTemp>$12: NilClass = nil\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_7" -> "bb::TestRescue#parse_ruby_bug_12402_2_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_8" [
        label = "block[id=8, rubyBlockId=2](<statTemp>$9: T.untyped, <statTemp>$12: NilClass, []$3: T.untyped, []$4: Integer(0))\l<gotoDeadTemp>$19: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_8" -> "bb::TestRescue#parse_ruby_bug_12402_2_6" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_9" [
        label = "block[id=9, rubyBlockId=0](<statTemp>$9: T.untyped, <statTemp>$12: NilClass, []$3: T.untyped, []$4: Integer(0))\l<statTemp>$8: T.untyped = <statTemp>$9: T.untyped.+(<statTemp>$12: NilClass)\l<returnMethodTemp>$2: T.untyped = []$3: T.untyped.[]=([]$4: Integer(0), <statTemp>$8: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_9" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
}

subgraph "cluster_::<Class:TestRescue>#<static-init>" {
    label = "::<Class:TestRescue>#<static-init>";
    color = blue;
    "bb::<Class:TestRescue>#<static-init>_0" [shape = invhouse];
    "bb::<Class:TestRescue>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:TestRescue>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(TestRescue) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U TestRescue>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U TestRescue>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: Symbol(:\"meth\") = :\"meth\"\l<statTemp>$3: Symbol(:\"meth\") = <statTemp>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$6: Symbol(:\"meth\"))\l<statTemp>$8: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$10: Symbol(:\"foo\") = :\"foo\"\l<statTemp>$7: Symbol(:\"foo\") = <statTemp>$8: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$10: Symbol(:\"foo\"))\l<statTemp>$12: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$14: Symbol(:\"bar\") = :\"bar\"\l<statTemp>$11: Symbol(:\"bar\") = <statTemp>$12: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$14: Symbol(:\"bar\"))\l<statTemp>$16: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$18: Symbol(:\"baz\") = :\"baz\"\l<statTemp>$15: Symbol(:\"baz\") = <statTemp>$16: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$18: Symbol(:\"baz\"))\l<statTemp>$20: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$22: Symbol(:\"take_arg\") = :\"take_arg\"\l<statTemp>$19: Symbol(:\"take_arg\") = <statTemp>$20: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$22: Symbol(:\"take_arg\"))\l<statTemp>$24: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$26: Symbol(:\"initialize\") = :\"initialize\"\l<statTemp>$23: Symbol(:\"initialize\") = <statTemp>$24: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$26: Symbol(:\"initialize\"))\l<statTemp>$28: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$30: Symbol(:\"multiple_rescue\") = :\"multiple_rescue\"\l<statTemp>$27: Symbol(:\"multiple_rescue\") = <statTemp>$28: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$30: Symbol(:\"multiple_rescue\"))\l<statTemp>$32: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$34: Symbol(:\"multiple_rescue_classes\") = :\"multiple_rescue_classes\"\l<statTemp>$31: Symbol(:\"multiple_rescue_classes\") = <statTemp>$32: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$34: Symbol(:\"multiple_rescue_classes\"))\l<statTemp>$36: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$38: Symbol(:\"parse_rescue_ensure\") = :\"parse_rescue_ensure\"\l<statTemp>$35: Symbol(:\"parse_rescue_ensure\") = <statTemp>$36: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$38: Symbol(:\"parse_rescue_ensure\"))\l<statTemp>$40: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$42: Symbol(:\"parse_bug_rescue_empty_else\") = :\"parse_bug_rescue_empty_else\"\l<statTemp>$39: Symbol(:\"parse_bug_rescue_empty_else\") = <statTemp>$40: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$42: Symbol(:\"parse_bug_rescue_empty_else\"))\l<statTemp>$44: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$46: Symbol(:\"parse_ruby_bug_12686\") = :\"parse_ruby_bug_12686\"\l<statTemp>$43: Symbol(:\"parse_ruby_bug_12686\") = <statTemp>$44: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$46: Symbol(:\"parse_ruby_bug_12686\"))\l<statTemp>$48: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$50: Symbol(:\"parse_rescue_mod\") = :\"parse_rescue_mod\"\l<statTemp>$47: Symbol(:\"parse_rescue_mod\") = <statTemp>$48: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$50: Symbol(:\"parse_rescue_mod\"))\l<statTemp>$52: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$54: Symbol(:\"parse_resbody_list_var\") = :\"parse_resbody_list_var\"\l<statTemp>$51: Symbol(:\"parse_resbody_list_var\") = <statTemp>$52: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$54: Symbol(:\"parse_resbody_list_var\"))\l<statTemp>$56: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$58: Symbol(:\"parse_rescue_else_ensure\") = :\"parse_rescue_else_ensure\"\l<statTemp>$55: Symbol(:\"parse_rescue_else_ensure\") = <statTemp>$56: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$58: Symbol(:\"parse_rescue_else_ensure\"))\l<statTemp>$60: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$62: Symbol(:\"parse_rescue\") = :\"parse_rescue\"\l<statTemp>$59: Symbol(:\"parse_rescue\") = <statTemp>$60: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$62: Symbol(:\"parse_rescue\"))\l<statTemp>$64: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$66: Symbol(:\"parse_resbody_var\") = :\"parse_resbody_var\"\l<statTemp>$63: Symbol(:\"parse_resbody_var\") = <statTemp>$64: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$66: Symbol(:\"parse_resbody_var\"))\l<statTemp>$68: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$70: Symbol(:\"parse_resbody_var_1\") = :\"parse_resbody_var_1\"\l<statTemp>$67: Symbol(:\"parse_resbody_var_1\") = <statTemp>$68: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$70: Symbol(:\"parse_resbody_var_1\"))\l<statTemp>$72: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$74: Symbol(:\"parse_rescue_mod_op_assign\") = :\"parse_rescue_mod_op_assign\"\l<statTemp>$71: Symbol(:\"parse_rescue_mod_op_assign\") = <statTemp>$72: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$74: Symbol(:\"parse_rescue_mod_op_assign\"))\l<statTemp>$76: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$78: Symbol(:\"parse_ruby_bug_12402\") = :\"parse_ruby_bug_12402\"\l<statTemp>$75: Symbol(:\"parse_ruby_bug_12402\") = <statTemp>$76: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$78: Symbol(:\"parse_ruby_bug_12402\"))\l<statTemp>$80: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$82: Symbol(:\"parse_ruby_bug_12402_1\") = :\"parse_ruby_bug_12402_1\"\l<statTemp>$79: Symbol(:\"parse_ruby_bug_12402_1\") = <statTemp>$80: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$82: Symbol(:\"parse_ruby_bug_12402_1\"))\l<statTemp>$84: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$86: Symbol(:\"parse_ruby_bug_12402_2\") = :\"parse_ruby_bug_12402_2\"\l<statTemp>$83: Symbol(:\"parse_ruby_bug_12402_2\") = <statTemp>$84: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$86: Symbol(:\"parse_ruby_bug_12402_2\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:TestRescue>#<static-init>_0" -> "bb::<Class:TestRescue>#<static-init>_1" [style="bold"];
    "bb::<Class:TestRescue>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:TestRescue>#<static-init>_1" -> "bb::<Class:TestRescue>#<static-init>_1" [style="bold"];
}

}

